#!/usr/bin/expect
##############################################################################
## cisco_cmd
## Written by: Matt Pascoe
##
## License:
##  cisco_cmd (hereafter referred to as "program") is free software;
##  you can redistribute it and/or modify it under the terms of the GNU General
##  Public License as published by the Free Software Foundation; either version
##  2 of the License, or (at your option) any later version.
##  Note that when redistributing modified versions of this source code, you
##  must ensure that this disclaimer and the above coder's names are included
##  VERBATIM in the modified code.
##
## Disclaimer:
##  This program is provided with no warranty of any kind, either expressed or
##  implied.  It is the responsibility of the user (you) to fully research and
##  comprehend the usage of this program.  As with any tool, it can be misused,
##  either intentionally (you're a vandal) or unintentionally (you're a moron).
##  THE AUTHOR(S) IS(ARE) NOT RESPONSIBLE FOR ANYTHING YOU DO WITH THIS PROGRAM
##  or anything that happens because of your use (or misuse) of this program,
##  including but not limited to anything you, your lawyers, or anyone else
##  can dream up.  And now, a relevant quote directly from the GPL:
##
## NO WARRANTY
##
##  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
##  FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
##  OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
##  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
##  OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
##  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
##  TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
##  PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
##  REPAIR OR CORRECTION.
##
## The GNU GPL can be found at http://www.fsf.org/copyleft/gpl.html
##
##############################################################################
##
## Description
##
##  cisco_cmd is a utility to send commands to a Juniper Netscreen OS
##  based device via expect
##
##############################################################################


################# User definable options ############################
# Set the default login mode.  Either telnet or ssh are your options
set DEFAULT_LOGINMODE telnet
# Specify the telnet command.  Allows you to specify other telnet command line options.
set TELNETCMD "telnet"
# Specify the ssh command.  Allows you to specify other ssh command line options.
set SSHCMD "ssh"
# Some devices (6500s with 2 sup cards) can take a long time to respond
# Adjust the default timeout for expect to something larger
set timeout 45
# When running from cron or some terminals the terminal may not be set
# to a desireable value. Lets force it to always be vt100
set env(TERM) vt100


################# Start Program ######################
set VERSION "1.00"
set AUTHORNAME "Matt Pascoe"
set AUTHOREMAIL "matt@opennetadmin.com"


set send_human {.1 .3 10 .005 .005}
set USER 0
set HOST 0
set PASSWORD 0
set FILENAME 0
set ENABLE 0
set CFG 0
set CMD 0
set DEBUG 0
set LOGGEDIN 0

#set PROMPT "->$|-> $"
set PROMPT ">$|> $"
set EPROMPT "#$|# $"

# Standardized logging
proc ONA_LOG {MSG} {
    # echo $(date +'%h %d %H:%M:%S') [ONA:$(basename $0)]: "$1"
    puts "[exec date +%h\ %d\ %H:%M:%S] \[ONA:cisco_cmd\]: $MSG"

    # Log it to syslog as well
    exec /usr/bin/logger -t \[ONA:cisco_cmd\] $MSG
}

# Get the contents of onabase
if [catch {set ONABASE [exec cat /etc/onabase]}] {
    ONA_LOG "ERROR => Unable to read /etc/onabase."
    exit 1
}


set USAGE "cisco_cmd-$VERSION by $AUTHORNAME <$AUTHOREMAIL>

Usage:
  cisco_cmd -h <hostname|ip> -u <username> -p <password> -c \"<command>\" \[-e <enablepassword1,pw2,...>\] \[-s|-t\] \[-d\] \[-v\]

  Required:
    -h HOSTNAME             DNS or IP address of cisco device to configure
    -u USERNAME		    Valid username for logging into device
    -c COMMAND		    Netscreen command to execute on device

  General Options:
    -p PASSWORD		    Valid password for logging into device
			      If one is not provided we will try the getpw utility
    -e ENABLE               Enable password if one is required
                              You can specify more than one to try seperated by commas
    -s SSH                  Connect using ssh. Cannot be used with -t
       OR
    -t TELNET               Connect using telnet. Cannot be used with -s
                            (default connection mode is currently: $DEFAULT_LOGINMODE)
    -d			    Set debug mode, prints more detail
    -v                      Enable TCL level debug logging to watch expect processes
"




# Process command line
for {set i 0} {$i < $argc} {incr i} {
    set arg [lindex $argv $i]
    incr i

    switch  -glob -- $arg {
        -h  { set HOST     [ lindex $argv $i ] } 
        -u  { set USER     [ lindex $argv $i ] } 
	-p  { set PASSWORD [ lindex $argv $i ] }
	-f  { set FILENAME [ lindex $argv $i ] }
	-c  { set COMMAND  [ lindex $argv $i ] }
	-e  { set ENABLE   [ lindex $argv $i ] }
	-d  { set DEBUG 1 }
	-v  { exp_internal 1 }
	-s  { set DEFAULT_LOGINMODE ssh }
	-t  { set DEFAULT_LOGINMODE telnet }
        -*  { ONA_LOG "ERROR => Unknown option! $arg\n"; puts $USAGE; exit 1 }
	default { break }
    }
}

# OVERRIDE DEFAULT USERNAME on ASAs
if [catch {set USER [exec $ONABASE/bin/getpw -h $HOST -t cisco_asa -p 1]}] {
    ONA_LOG "ERROR => $HOST: Unable to get the username using getpw program. Check for a proper host entry for type 'cisco_asa' in getpw.conf."
    exit 1
}

# Check that everything exists
if {$USER == 0}     {ONA_LOG "ERROR => You must specify a username using -u.";puts $USAGE;exit 1 }
if {$HOST == 0}     {ONA_LOG "ERROR => You must specify a hostname or ip using -h.";puts $USAGE;exit 1 }

# If there was no password, try getting it via getpw
if {$PASSWORD == 0} {
    if [catch {set PASSWORD [exec $ONABASE/bin/getpw -h $HOST -t $USER -p 1]}] {
        ONA_LOG "ERROR => $HOST: Unable to get the password using getpw program. Check for a proper host entry for type '$USER' in getpw.conf."
        exit 1 
    }
} 

# If password still has nothing in it, then fail
if {$PASSWORD == 0} {
    ONA_LOG "ERROR => Unable to determine password using -p or getpw command."
    exit 1 
}

if {$COMMAND == 0} {ONA_LOG "ERROR => You must specify a command to send using -c.";puts $USAGE;exit 1 }


# Test that we can connect to the device
# This is purely to try and speed up the whole process by not trying devices
# that we can't connect to anyway
switch $DEFAULT_LOGINMODE {
    ssh    {set CON_PORT 22}
    telnet {set CON_PORT 23}
}

# Try the default connection port first
if [catch {exec netcat -z $HOST $CON_PORT}] {
    # If it failed, then try the other port
    switch $CON_PORT {
        22 {set CON_PORT 23}
        23 {set CON_PORT 22}
    }
    if [catch {exec netcat -z $HOST $CON_PORT}] {
        ONA_LOG "ERROR => $HOST: Unable to connect to the device via ssh or telnet using the netcat (http://netcat.sf.net) command"
        exit 1
    }
}

#
########### Login ################
#


# Lets disable the output of what expect is doing unless we are in debug mode
log_user 0
if {$DEBUG == 1} { log_user 1 }

switch $DEFAULT_LOGINMODE {
	telnet { spawn -noecho $TELNETCMD $HOST }
	ssh    { spawn -noecho $SSHCMD -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USER@$HOST }
}


expect {
    -re "\[Uu]sername: "            {
                                      sleep 1;
                                      send "$USER\r"
                                      exp_continue
                                    }
    -re "(login:)"                  {
                                      sleep 1;
                                      send "$USER\r"
                                      exp_continue
                                    }
    -re "@\[^\r\n]+\[Pp]assword: "  {
                                      # ssh pwd prompt
                                      sleep 1;
                                      send "$PASSWORD\r"
                                      exp_continue
                                    }
    -re "\[Pp]assword: "            {
                                      sleep 1;
                                      send "$PASSWORD\r"

                                      # After we login, change the password to the enable password.
                                      if [catch {set PASSWORD [exec $ONABASE/bin/getpw -h $HOST -t enable -p 1]}] {
                                          ONA_LOG "ERROR => $HOST: Unable to get the enable password using getpw program. Check for a proper host entry for type 'enable' in getpw.conf."
                                          exit 1 
                                      }
                                      exp_continue
                                    }
    -re $PROMPT                     {
                                      sleep 1;
                                      send "enable\r"
                                      exp_continue
                                    }
    -re $EPROMPT                     { }
 }

################### Send the commands ####################
send -h "terminal pager 0\r"
expect -re $EPROMPT

# loop through each command separated by a semicolon
foreach CMD [split $COMMAND ";"] {
    send -h "$CMD\r"
    log_user 1
    expect -re "$CMD\r\n|$CMD\r\r\n"
    #puts "$expect_out(buffer)"
    expect -re $EPROMPT
    #puts "$expect_out(buffer)"
}

send "exit\r"
puts "\n"
exit 0
