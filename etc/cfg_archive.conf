# This is the configuration file for the cfg_archive process.  It will be used by
# the following scripts:
#   cfg_archive
#   cfg_archive_trapscript
#   cfg_archive_procspool
#
# This script also assumes that /etc/onabase has been set to the base ONA directory path
# and that ONABASE was set in the scripts that DOT in this config.
##################################################
# Uncomment this to have a bit more debug level messages for all processes
#DEBUGON=1

# This is the username that will be used to log into each device.
# It is expected that this one user has the ability to log into each device on your network
# and that the user has the proper privileges to execute a show startup command.
# The password for this user will be determined using the getpw command.
USERNAME=onaarchive
# You can also specify a per manufactuer username as well by prepending the manufacturer
# name and an underscore
#NETSCREEN_USERNAME=admin

# Set the global default connection method.
# The value must be either 'ssh' or 'telnet'
# It is best to set this to your most common mode, if it fails, we will automatically try the other method.
CON_MODE=ssh

# Email settings for config_archive to send status information to (diffs etc)
MAIL_SERVER=mx.example.net             # name or IP of the mail server to use
MAIL_FROM=ona-archive@`hostname`       # email address to use in the from field
MAIL_TO="user@example.net"             # email address(es) to send our notifications to

# The following is an array of commands to be executed on the device during the config archive process.
# Commands are in the form of "command name:CONF_ARCHIVE_TYPE"
# command name is simply the name of the command to run on the device, in its native syntax
# CONF_ARCHIVE_TYPE is the exact name of the configuration type in the database to store this configuration under.
# This is a bash shell array so format it appropriately
# You should prefix this variable based on the manufacturer type of the device as defined in the database
# If you are using the LOCAL_COPY option you must put the command first that you want to save as a local copy
CISCO_DEV_COMMANDS=( "show version:IOS_VERSION" "show start:IOS_CONFIG" )
NETSCREEN_DEV_COMMANDS=( "get config:NS_CONFIG" "get system:NS_VERSION" )

# Set Y or N to use the spool directory method.  This will simply "touch" a file in the spool directory
# that is named either the FQDN or the IP of the host needing an update.  A cron job would then
# be used to execute cfg_archive on each file in that directory
USE_SPOOL=Y

# Spool dir used to store info for processing later
SPOOL_DIR=$ONABASE/spool/cfg_archive

# This path stores the .sed files used to extract data from the command output. 
# The actual files will be something like cfg_archive.<manufacturer>.GLOBAL.sed
SED_PREFIX=$ONABASE/etc/cfg_archive   # the file path/name prefix for the sed scripts

# Path to the cfg_archive script that communicates with the device, change this if you
# are using a different path for the cfg_archive script
ARCHIVE_CMD=$ONABASE/bin/cfg_archive

# Path to the communication script used to connect and execute commands on the device
# it is expected that <manufactuer>_cmd will be the name of the command in this path
COMMUNICATION_CMD_PATH=$ONABASE/bin

# Path to the DCM commandline utility
DCM_CMD=$ONABASE/bin/dcm.pl

# Path in the local file system, to save an unmodified copy of the output of the first
# entry in the <MANUFACTURER>_DEV_COMMANDS variable defined above.
# The goal here is a full copy of a show startup command that could be used to restore the
# device to its last known state.  Typically these would be accessable via tftp and automated.
# If you do NOT want to save local copies, leave this setting blank
LOCAL_COPY_PATH=$ONABASE/cfg_archive_local





####################################################################################################
# The following is a function used to log data, you should not need to change this part of the file
# TODO: One of these years it should probably move into a standardized library of functions

# This will log a message in a standardized way
# Its job is simple.. take the message that was passed in and log it via some mechanism.
# Currently, it echos to stdout and logs in syslog
function ONA_LOG {
    # Log it to the screen
    echo $(date +'%h %d %H:%M:%S') [ONA:$(basename $0)]: "$1"

    # log it to syslog
    /usr/bin/logger -t [ONA:$(basename $0)] "$1"
}
####################################################################################################
