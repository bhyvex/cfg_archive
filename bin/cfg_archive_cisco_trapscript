#!/bin/bash
##############################################################################
## cfg_archive_cisco_trapscript
## Written by: Matt Pascoe <matt@opennetadmin.com>
##
## License:
##  cfg_archive_cisco_trapscript (hereafter referred to as "program") is free software;
##  you can redistribute it and/or modify it under the terms of the GNU General
##  Public License as published by the Free Software Foundation; either version
##  2 of the License, or (at your option) any later version.
##  Note that when redistributing modified versions of this source code, you
##  must ensure that this disclaimer and the above coder's names are included
##  VERBATIM in the modified code.
##
## Disclaimer:
##  This program is provided with no warranty of any kind, either expressed or
##  implied.  It is the responsibility of the user (you) to fully research and
##  comprehend the usage of this program.  As with any tool, it can be misused,
##  either intentionally (you're a vandal) or unintentionally (you're a moron).
##  THE AUTHOR(S) IS(ARE) NOT RESPONSIBLE FOR ANYTHING YOU DO WITH THIS PROGRAM
##  or anything that happens because of your use (or misuse) of this program,
##  including but not limited to anything you, your lawyers, or anyone else
##  can dream up.  And now, a relevant quote directly from the GPL:
##
## NO WARRANTY
##
##  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
##  FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
##  OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
##  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
##  OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
##  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
##  TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
##  PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
##  REPAIR OR CORRECTION.
##
## The GNU GPL can be found at http://www.fsf.org/copyleft/gpl.html
##
##############################################################################
##
## Description
## Subversion info: $Id$
##
## This script is intended to be called by the snmptrapd process when either a
## 'coldstart' or a 'ciscoConfigManEvent' trap has been recieved.  It will
## extract the hostname or ip from the snmp trap packet and then determine if
## the operation was a running configuration to a startup configuration.  This
## indicates someone has saved the configuration and we want to use cisco_archive
## to check the device configuration against the last configuration in the archive.
##
## Due to the fact that a trap is sent each time a user enters into config term
## mode, we must ignore that state therefore can not check when only the running
## configuration has changed.
##
## We trap for the coldstart event as well which indicates a box has just been
## powered up and could have a different config than was last archived.
##
## The following lines are what one might place in the snmptrapd.conf file to envoke this program
## for coldstart and config related traps.
##
##      traphandle SNMPv2-SMI::enterprises.9.9.43.2.0.1 /opt/ona/bin/cisco_archive_trapscript
##      traphandle SNMPv2-MIB::coldStart /opt/ona/bin/cisco_archive_trapscript
##
## The Cisco IOS based device will require configuration similar to the following:
##
##      snmp-server enable traps snmp coldstart
##      snmp-server enable traps config
##      snmp-server host x.x.x.x inform version 2c <community,if you use one>  config snmp 
##
## The last line in this example could change depending on the version of SNMP you are running, this
## example is based on a v2c configuration
##
## For testing purposes, you can invoke snmptrapd using the following command to watch traps come in:
##
##      snmptrapd -Lo -f
##
## You can choose the USE_SPOOL option in large environments.  This simply "touches" a file in the
## specified SPOOL_DIR.  Another script cisco_archive_procspool would then be in cron to process
## the entries in the spool directory.
##
## In the situation where you have devices that have large configurations and take more than a few 
## seconds to actually update and store in nvram, you may have to use the USE_SPOOL mode.  This
## should sufficiently allow the device time to save its updates before the archive process re-reads
## the configs.  If it is too quick you could get (Device or resource busy) messages or blank configs.
## A sleep statement could be placed in the cisco_archive_trapscript program as well, however, many
## snmptrapd daemons will block while the child process is executing.  The sleep statement method
## has not been fully tested and is NOT recommended.
##############################################################################
# Get the config info
[ ! -r /etc/onabase ] && echo "[$0] ERROR: Unable to read /etc/onabase." && exit 1
ONABASE=`cat /etc/onabase`
. $ONABASE/etc/cfg_archive.conf
##############################################################################

# This is a list of the snmp values that could come back from the device for source/dest locations
# They must remain in the order listed here as their position corresponds with the value returned by SNMP
CFG_DESC=( ZERO erase commandSource running startup local networkTftp networkRcp networkFtp networkScp )

# Gather info from the output of the trap
read HOST
read IPSTRING

# get rid of extra stuff in agent-addr fields like "UDP: [x.x.x.x]:23423"
IPADDR=`echo $IPSTRING|sed -e 's/.*\[//' -e 's/\]:.*//'`

# Reference the device using either $IPADDR or $HOST
DEVICE=$HOST

# Read each OID and its value that was in the trap
while read OID VAL
do
        VAL=`echo $VAL|sed 's/= //'|sed 's/\"//g'`

        case "$OID" in
                *.9.9.43.1.1.6.1.3.*)                               CMDSOURCE=$VAL;;
                *.9.9.43.1.1.6.1.4.*)                               CFGSOURCE=$VAL;;
                *.9.9.43.1.1.6.1.5.*)                               CFGDEST=$VAL;;
                #SNMPv2-SMI::enterprises.9.9.43.1.1.6.1.3.*)         CMDSOURCE=$VAL;;
                #SNMPv2-SMI::enterprises.9.9.43.1.1.6.1.4.*)         CFGSOURCE=$VAL;;
                #SNMPv2-SMI::enterprises.9.9.43.1.1.6.1.5.*)         CFGDEST=$VAL;;
		# These are for when you have CISCO MIBs loaded
                ccmHistoryEventCommandSource*)   		    CMDSOURCE=$VAL;;
                ccmHistoryEventConfigSource*)           	    CFGSOURCE=$VAL;;
                ccmHistoryEventConfigDestination*)                  CFGDEST=$VAL;;
                *snmpTrapOID.0)                                     SNMPTRAPOID=`echo $VAL|sed "s/.*coldStart.*/coldStart/"`;;
        esac
done


if [ ! -w "$SPOOL_DIR" -a "$USE_SPOOL" = "Y" ]
then
	ONA_LOG "ERROR => $DEVICE: The directory '$SPOOL_DIR' does not exist or is not writeable."
	exit 1
fi

# If we are a coldstart (aka, the box just booted up from poweroff) then lets check its configs
if [ "$SNMPTRAPOID" = "coldStart" ]
then
	if [ "$USE_SPOOL" = "Y" ]
	then
        	ONA_LOG "INFO => $DEVICE: Looks like the box was booted. Marking spool entry."
		touch $SPOOL_DIR/$DEVICE
	else
        	ONA_LOG "INFO => $DEVICE: Looks like the box was booted. Checking for updates."
        	eval $ARCHIVE_CMD -h $DEVICE
	fi
fi

# If we are a ccmCLIRunningConfigChanged trap
if [ "$SNMPTRAPOID" = "SNMPv2-SMI::enterprises.9.9.43.2.0.2" ]
then
	if [ "$USE_SPOOL" = "Y" ]
	then
        	ONA_LOG "INFO => $DEVICE: ccmCLIRunningConfigChanged trap found. Marking spool entry."
		touch $SPOOL_DIR/$DEVICE
	else
        	ONA_LOG "INFO => $DEVICE: ccmCLIRunningConfigChanged trap found. Checking for updates."
        	eval $ARCHIVE_CMD -h $DEVICE
	fi
fi

# If the source is erase or commandSource (user went to config terminal mode) then ignore it
if [ "$CFGSOURCE" = "commandSource" -o "$CFGSOURCE" = "2" ]
then
	[ -z $DEBUGON ] || ONA_LOG "DEBUG => $DEVICE: ${CFG_DESC[$CFGSOURCE]}=>${CFG_DESC[$CFGDEST]}: Skipping config trap. User most likely entered config term mode."
else
	# If it is written to startup, then lets go check it out
        if [ "$CFGDEST" = "startup" -o "$CFGDEST" = "4" ]
        then
		if [ "$USE_SPOOL" = "Y" ]
		then
        		ONA_LOG "INFO => $DEVICE: ${CFG_DESC[$CFGSOURCE]}=>${CFG_DESC[$CFGDEST]}: Marking spool entry."
			touch $SPOOL_DIR/$DEVICE
		else
                	ONA_LOG "INFO => $DEVICE: ${CFG_DESC[$CFGSOURCE]}=>${CFG_DESC[$CFGDEST]}: Checking for updates."
			# Artificial pause to allow the device time to finish saving its config
			# Caution as this makes the snmptrapd process block, NOT recommended
			#sleep 10
                	eval $ARCHIVE_CMD -h $DEVICE
		fi
        else
        	[ -z $DEBUGON ] || ONA_LOG "DEBUG => $DEVICE: ${CFG_DESC[$CFGSOURCE]}=>${CFG_DESC[$CFGDEST]}: Skipping, it was not a run to startup operation."
        fi
fi

